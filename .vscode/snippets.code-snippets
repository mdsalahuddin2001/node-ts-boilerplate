{
  "Domain index file": {
    "prefix": "nbp-index",
    "body": [
      "import { Router } from 'express';",
      "import { routes } from './api';",
      "",
      "const defineRoutes = (expressRouter: Router): void => {",
      "  expressRouter.use('/${1:route}', routes());",
      "};",
      "",
      "export default defineRoutes;",
    ],
    "description": "TypeScript boilerplate domain's index file",
  },
  "Domain API CRUD Routes": {
    "prefix": "nbp-api",
    "body": [
      "import express, { Request, Response, NextFunction } from 'express';",
      "import logger from '@/libraries/log/logger';",
      "import { BadRequestError, NotFoundError } from '@/libraries/error-handling';",
      "import { paginatedSuccessResponse, successResponse } from '@/libraries/utils/sendResponse';",
      "import { authenticate, authorize } from '@/middlewares/auth';",
      "import { validateBody, validateParams } from '@/middlewares/request-validate';",
      "import { logRequest } from '@/middlewares/log';",
      "import { create, search, getById, updateById, deleteById } from './service';",
      "import { createSchema, updateSchema, deleteSchema } from './validation';",
      "",
      "const routes = (): express.Router => {",
      "  const router = express.Router();",
      "  logger.info(`Setting up routes for ${1:ModelName}`);",
      "",
      "  /* =================================================",
      "  GET - /api/v1/${1/(.*)/${1:toLowerCase()}/} - Search ${1} - Admin",
      "  ====================================================*/",
      "  router.get(",
      "    '/',",
      "    authenticate,",
      "    authorize('admin'),",
      "    logRequest({}),",
      "    async (req: Request, res: Response) => {",
      "      const data = await search(req.query);",
      "      paginatedSuccessResponse(res, { data });",
      "    }",
      "  );",
      "",
      "  /* =================================================",
      "  POST - /api/v1/${1/(.*)/${1:toLowerCase()}/} - Create ${1} - Admin",
      "  ====================================================*/",
      "  router.post(",
      "    '/',",
      "    authenticate,",
      "    authorize('admin'),",
      "    validateBody(createSchema),",
      "    logRequest({}),",
      "    async (req: Request, res: Response) => {",
      "      const item = await create(req.body);",
      "      successResponse(res, { data: item });",
      "    }",
      "  );",
      "",
      "  /* =================================================",
      "  GET - /api/v1/${1/(.*)/${1:toLowerCase()}/}:id - Get ${1} by ID",
      "  ====================================================*/",
      "  router.get(",
      "    '/:id',",
      "    authenticate,",
      "    logRequest({}),",
      "    validateParams(deleteSchema),",
      "    async (req: Request, res: Response) => {",
      "      const item = await getById(req.params.id);",
      "      if (!item) {",
      "        throw new NotFoundError(`${1} not found`, `domain/${1:toLowerCase()}/api.ts - /:id`);",
      "      }",
      "      successResponse(res, { data: item });",
      "    }",
      "  );",
      "",
      "  /* =================================================",
      "  PATCH - /api/v1/${1/(.*)/${1:toLowerCase()}/}:id - Update ${1} by ID - Admin",
      "  ====================================================*/",
      "  router.patch(",
      "    '/:id',",
      "    authenticate,",
      "    authorize('admin'),",
      "    validateBody(updateSchema),",
      "    validateParams(deleteSchema),",
      "    logRequest({}),",
      "    async (req: Request, res: Response) => {",
      "      const item = await updateById(req.params.id, req.body);",
      "      if (!item) {",
      "        throw new NotFoundError(`${1} not found`, `domain/${1:toLowerCase()}/api.ts - /:id`);",
      "      }",
      "      successResponse(res, { data: item });",
      "    }",
      "  );",
      "",
      "  /* =================================================",
      "  DELETE - /api/v1/${1/(.*)/${1:toLowerCase()}/}:id - Delete ${1} by ID - Admin",
      "  ====================================================*/",
      "  router.delete(",
      "    '/:id',",
      "    authenticate,",
      "    authorize('admin'),",
      "    validateParams(deleteSchema),",
      "    logRequest({}),",
      "    async (req: Request, res: Response) => {",
      "      const item = await deleteById(req.params.id);",
      "      if (!item) {",
      "        throw new NotFoundError(`${1} not found`, `domain/${1:toLowerCase()}/api.ts - /:id`);",
      "      }",
      "      successResponse(res, { data: item });",
      "    }",
      "  );",
      "",
      "  return router;",
      "};",
      "",
      "export { routes };",
    ],
    "description": "Enterprise-ready API routes (nbp-api) structure",
  },
  "Domain CRUD Service": {
    "prefix": "nbp-service",
    "body": [
      "import { BadRequestError } from '@/libraries/error-handling';",
      "import { QueryBuilder } from '@/libraries/query/QueryBuilder';",
      "import logger from '@/libraries/log/logger';",
      "import Model from './schema';",
      "",
      "interface SearchQuery {",
      "  search?: string;",
      "  sort?: string;",
      "  limit?: string | number;",
      "  page?: string | number;",
      "}",
      "",
      "// Create a new ${1:ModelName}",
      "export const create = async (data: any): Promise<any> => {",
      "  const exists = await Model.findOne({ name: data.name });",
      "  if (exists) {",
      "    logger.error(`create(): ${1} already exists`, { name: data.name });",
      "    throw new BadRequestError(`${1} already exists`, `${1} service create()`);",
      "  }",
      "  const item = await Model.create(data);",
      "  logger.info(`create(): ${1} created`, { id: item._id });",
      "  return item;",
      "};",
      "",
      "// Query Builder instance",
      "const queryBuilder = new QueryBuilder({",
      "  searchFields: ['name'],",
      "  sortableFields: ['name', 'createdAt'],",
      "  filterableFields: ['name', 'createdAt'],",
      "  defaultSort: '-createdAt',",
      "});",
      "",
      "// Search ${1}",
      "export const search = async (query: SearchQuery) => {",
      "  const data = await queryBuilder.query(Model, query).paginate().execute();",
      "  return data;",
      "};",
      "",
      "// Get ${1} by ID",
      "export const getById = async (id: string): Promise<any> => {",
      "  const item = await Model.findById(id);",
      "  if (!item) {",
      "    logger.info(`getById(): ${1} not found`, { id });",
      "    return null;",
      "  }",
      "  logger.info(`getById(): ${1} fetched`, { id });",
      "  return item;",
      "};",
      "",
      "// Update ${1} by ID",
      "export const updateById = async (id: string, data: any): Promise<any> => {",
      "  const item = await Model.findByIdAndUpdate(id, data, { new: true });",
      "  if (!item) {",
      "    logger.info(`updateById(): ${1} not found`, { id });",
      "    return null;",
      "  }",
      "  logger.info(`updateById(): ${1} updated`, { id });",
      "  return item;",
      "};",
      "",
      "// Delete ${1} by ID",
      "export const deleteById = async (id: string): Promise<any> => {",
      "  const item = await Model.findByIdAndDelete(id);",
      "  if (!item) {",
      "    logger.info(`deleteById(): ${1} not found`, { id });",
      "    return null;",
      "  }",
      "  logger.info(`deleteById(): ${1} deleted`, { id });",
      "  return item;",
      "};",
    ],
    "description": "Enterprise-ready CRUD service (nbp-service) structure",
  },
  "Mongoose Schema": {
    "prefix": "nbp-schema",
    "body": [
      "import mongoose, { Model, Schema, Document } from 'mongoose';",
      "import { baseSchema } from '@/libraries/db/base-schema';",
      "",
      "// Define an interface for the ${Model} document",
      "export interface I${Model} extends Document {",
      "  name: string;",
      "  // other fields here",
      "}",
      "",
      "const schema = new Schema<I${Model}>({",
      "  name: { type: String, required: true },",
      "  // other schema properties here",
      "});",
      "",
      "// Add base schema (timestamps, etc.)",
      "schema.add(baseSchema);",
      "",
      "// Create and export the model",
      "const ${Model}Model: Model<I${Model}> = mongoose.model<I${Model}>('${Model}', schema);",
      "",
      "export default ${Model}Model;",
    ],
    "description": "TypeScript Mongoose schema with base schema and strong typing",
  },
  "Zod Validation Schemas": {
    "prefix": "nbp-validation",
    "body": [
      "import { z } from 'zod';",
      "import { idSchema } from '@/libraries/utils/zod-validations';",
      "",
      "// Create schema",
      "export const createSchema = z.object({",
      "  name: z.string().min(1, 'Name is required'),",
      "  // add other fields as needed",
      "});",
      "",
      "// Update schema (partial of create)",
      "export const updateSchema = createSchema.partial();",
      "",
      "// Delete schema (ID validation)",
      "export const deleteSchema = z.object({",
      "  id: idSchema,",
      "});",
      "",
      "// Query schema (generic for filtering, sorting, pagination, etc.)",
      "export const searchQuerySchema = z.object({",
      "  search: z.string().optional(),",
      "  sort: z.string().optional(),",
      "  limit: z.coerce.number().optional(),",
      "  page: z.coerce.number().optional(),",
      "  select: z.string().optional(),",
      "});",
      "",
      "// Type inference helpers",
      "export type CreateType = z.infer<typeof createSchema>;",
      "export type UpdateType = z.infer<typeof updateSchema>;",
      "export type DeleteType = z.infer<typeof deleteSchema>;",
      "export type SearchQueryType = z.infer<typeof searchQuerySchema>;",
      "",
      "// Reuse the idSchema for get-by-id endpoints",
      "export const getByIdSchema = idSchema;",
    ],
    "description": "Zod validation schemas boilerplate for CRUD operations",
  },
  "Route Comment": {
    "prefix": "cmt-route",
    "body": [
      "/* =====================================================================================",
      "${1:METHOD} - ${2:/api/v1/example} - ${3:Description here} - ${4:Public|Private|Admin}",
      "========================================================================================*/",
    ],
    "description": "Detailed route comment block for Express route",
  },
}
